import networkx as nx
import matplotlib.pyplot as plt


def kruskal_mst():
    # edges and weights
    edges = [
        ("A", "B", 1),
        ("B", "D", 3),
        ("D", "F", 1),
        ("A", "C", 5),
        ("C", "D", 8),
        ("C", "E", 6),
        ("E", "Z", 1),
        ("Z", "F", 6),
        ("A", "G", 10),
        ("G", "E", 3),
        ("C", "Z", 9)
    ]

    # define graph
    graph = nx.Graph()
    for u, v, w in edges:
        graph.add_edge(u, v, weight=w)

    # positioning
    custom_pos = {
        "A": (0, 2),
        "B": (1, 3),
        "C": (2, 2),
        "D": (2, 3),
        "E": (2, 1),
        "F": (4, 3),
        "G": (1, 1),
        "Z": (4, 1)
    }

    # draw graph
    def draw_graph_with_vertical_labels(graph, pos, edge_labels, title, mst=None):
        plt.figure(figsize=(10, 6))
        nx.draw(graph, pos, with_labels=True, node_color="lightblue", node_size=700, font_size=10, alpha=0.3)
        if mst:
            nx.draw(mst, pos, with_labels=True, node_color="lightgreen", node_size=700, font_size=10)
        nx.draw_networkx_edge_labels(
            graph,
            pos,
            edge_labels=edge_labels,
            label_pos=0.5,
            verticalalignment="center",
            rotate=False,
            font_size=8,
            bbox=dict(boxstyle="round,pad=0.3", edgecolor="black", facecolor="white")
        )
        plt.title(title)
        plt.show()

    edge_labels = nx.get_edge_attributes(graph, 'weight')
    draw_graph_with_vertical_labels(graph, custom_pos, edge_labels, "Original Graph with Custom Layout")

    sorted_edges = sorted(edges, key=lambda x: x[2])  
    mst = nx.Graph()  
    uf = {node: node for node in graph.nodes}  

    def find(node):
        if uf[node] != node:
            uf[node] = find(uf[node])
        return uf[node]

    def union(node1, node2):
        root1 = find(node1)
        root2 = find(node2)
        if root1 != root2:
            uf[root2] = root1

    # Add edges one by one to the MST
    for step, (u, v, w) in enumerate(sorted_edges, 1):
        if find(u) != find(v):
            mst.add_edge(u, v, weight=w)
            union(u, v)

            # Plot the current MST
            edge_labels = nx.get_edge_attributes(mst, 'weight')
            draw_graph_with_vertical_labels(graph, custom_pos, edge_labels, f"Step {step}: Adding edge ({u}, {v}) with weight {w}", mst)

    # Final MST
    edge_labels = nx.get_edge_attributes(mst, 'weight')
    draw_graph_with_vertical_labels(mst, custom_pos, edge_labels, "Final Minimum Spanning Tree")


# entry point
def main():
    kruskal_mst()


main()

